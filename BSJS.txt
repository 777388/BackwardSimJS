// Made with Chatgpt, enter this code into your web console.
// Create a mock element to simulate the custom element
class MockElement extends HTMLElement {}

// Define a custom element for the BackwardChannelComponent
customElements.define('backward-channel-component', MockElement);

// Instantiate the BackwardChannelComponent manually
const backwardChannelComponent = document.createElement('backward-channel-component');

// Simulate the connectedCallback() method
backwardChannelComponent.connectedCallback = function() {
  // Simulate the startBackwardChannelLoop() method
  const longPollingRequest = () => {
    // Simulate the long polling request
    simulateLongPollingRequest()
      .then(data => {
        // Simulate handling the server updates
        this.handleServerUpdates(data);

        // Continue the backward channel loop
        longPollingRequest();
      })
      .catch(error => {
        // Simulate handling any errors
        console.error('Long polling request failed:', error);
        // Retry or handle the error as needed
      });
  };

  // Simulate starting the initial long polling request
  longPollingRequest();
};

// Simulate the handleServerUpdates() method
backwardChannelComponent.handleServerUpdates = function(data) {
  // Simulate updating the Shadow DOM content
  console.log('Received server updates:', data);

  // Simulate initiating backward channel requests if needed
  simulateBackwardChannelRequest()
    .then(response => {
      // Simulate processing the response as needed
      console.log('Backward channel request successful:', response);
    })
    .catch(error => {
      // Simulate handling any errors
      console.error('Backward channel request failed:', error);
      // Retry or handle the error as needed
    });
};

// Simulate the long polling request
function simulateLongPollingRequest() {
  // Simulate the fetch request to your_long_polling_endpoint
  // Return a Promise that resolves with the mock response data
  return new Promise(resolve => {
    setTimeout(() => {
      resolve({ message: 'Server update' });
    }, 2000);
  });
}

// Simulate the backward channel request
function simulateBackwardChannelRequest() {
  // Simulate the fetch request to your_backward_channel_endpoint
  // Return a Promise that resolves with the mock response
  return new Promise(resolve => {
    setTimeout(() => {
      resolve({ status: 'success' });
    }, 1000);
  });
}

// Call the connectedCallback manually to start the backward channel loop
backwardChannelComponent.connectedCallback();
